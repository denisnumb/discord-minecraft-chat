plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'com.gradleup.shadow' version '9.0.0-beta8'
}

// jarJar.enable()

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {

}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    shadow("net.dv8tion:JDA:5.2.2") {transitive = false }
    shadow("com.squareup.okhttp3:okhttp:4.12.0") {transitive = false }
    shadow("org.jetbrains.kotlin:kotlin-stdlib:1.9.0") {transitive = false }
    shadow("com.squareup.okio:okio:3.9.1") {transitive = false }
    shadow("com.neovisionaries:nv-websocket-client:2.14") {transitive = false }
    shadow("net.sf.trove4j:trove4j:3.0.3") {transitive = false }
    shadow("com.fasterxml.jackson.core:jackson-databind:2.15.2") {transitive = false }
    shadow("com.fasterxml.jackson.core:jackson-core:2.15.2") {transitive = false }
    shadow("com.fasterxml.jackson.core:jackson-annotations:2.15.2") {transitive = false }
    shadow("org.apache.commons:commons-collections4:4.4") {transitive = false }

    minecraftLibrary 'net.dv8tion:JDA:5.2.2'
    minecraftLibrary 'com.squareup.okhttp3:okhttp:4.12.0'
    minecraftLibrary 'org.jetbrains.kotlin:kotlin-stdlib:1.9.0'
    minecraftLibrary 'com.squareup.okio:okio:3.9.1'
    minecraftLibrary 'com.neovisionaries:nv-websocket-client:2.14'
    minecraftLibrary 'net.sf.trove4j:trove4j:3.0.3'
    minecraftLibrary 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    minecraftLibrary 'com.fasterxml.jackson.core:jackson-core:2.15.2'
    minecraftLibrary 'com.fasterxml.jackson.core:jackson-annotations:2.15.2'
    minecraftLibrary 'org.apache.commons:commons-collections4:4.4'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

tasks.shadowJar {
    configurations = [project.configurations.shadow]
    archiveClassifier.set("")
    mergeServiceFiles()

    relocate("com.squareup", "com.shadow.com.squareup")
    relocate("com.neovisionaries", "com.shadow.com.neovisionaries")
    relocate("com.fasterxml", "com.shadow.com.fasterxml")
    relocate("net.dv8tion", "com.shadow.net.dv8tion")
    relocate("org.apache", "com.shadow.org.apache")
    relocate("gnu.trove", "com.shadow.gnu.trove")
    relocate("kotlin", "com.shadow.kotlin")
    relocate("okhttp3", "com.shadow.okhttp3")
    relocate("okio", "com.shadow.okio")
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

mixin {
    add sourceSets.main, "discord_chat_mod.refmap.json"
    config "discord_chat_mod.mixins.json"
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

reobf {
    shadowJar {}
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
            from components.java
            jarJar.component(it)
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.shadowJar.dependsOn 'reobfJar'
project.tasks.build.dependsOn project.tasks.shadowJar